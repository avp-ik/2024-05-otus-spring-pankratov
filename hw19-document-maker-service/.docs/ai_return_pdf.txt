Here's how to pass a PDF file to a Spring REST controller:
Define the Controller Method:
Use @PostMapping to handle the POST request.
Use @RequestParam("file") MultipartFile file to receive the PDF file.
Use produces = "application/pdf" in @RequestMapping or @PostMapping to specify that the method returns a PDF.
Java

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

@RestController
public class PdfController {

    @PostMapping(value = "/uploadPdf", produces = "application/pdf")
    public ResponseEntity<byte[]> uploadPdf(@RequestParam("file") MultipartFile file) {
        try {
            if (file.isEmpty()) {
                return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
            }

            byte[] pdfBytes = file.getBytes();

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_PDF);
            headers.setContentDispositionFormData("inline", "document.pdf"); // or "attachment"

            return new ResponseEntity<>(pdfBytes, headers, HttpStatus.OK);

        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
Handle the PDF Data:
The file.getBytes() method retrieves the PDF content as a byte array.
You can process or store the pdfBytes as needed.
Return the PDF:
Create HttpHeaders to set the Content-Type to application/pdf.
Use Content-Disposition to specify if the PDF should be displayed inline or downloaded as an attachment.
Return a ResponseEntity<byte[]> with the PDF bytes, headers, and HTTP status code.
Client-side (e.g., using fetch in JavaScript):
JavaScript

const formData = new FormData();
formData.append('file', pdfFile); // pdfFile is a File object

fetch('/uploadPdf', {
  method: 'POST',
  body: formData
})
.then(response => response.blob())
.then(blob => {
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'downloaded.pdf';
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  window.URL.revokeObjectURL(url);
});